#!/usr/bin/env python3
"""
Aplicaci√≥n Streamlit Principal - Conciliador Bancario
Interfaz de usuario profesional para conciliaci√≥n bancaria
"""

import os
import time
import streamlit as st
import logging
from typing import Dict, Any, Optional
from pathlib import Path

# Configurar p√°gina ANTES de cualquier otra cosa
st.set_page_config(
    page_title="SPEI-BOT",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://github.com/JuliMolinaZ/spei-bot',
        'Report a bug': 'https://github.com/JuliMolinaZ/spei-bot/issues',
        'About': "SPEI-BOT - Sistema Profesional de Conciliaci√≥n Bancaria v2.0"
    }
)

# Importaciones internas
from config.settings import load_config, validate_config
from services.google_sheets import GoogleSheetsService
from core.processor import BankProcessor
from ui.components import UIComponents
from utils.helpers import setup_logging

logger = logging.getLogger(__name__)

class ConciliadorApp:
    """Aplicaci√≥n principal del Conciliador Bancario"""
    
    def __init__(self):
        """Inicializar la aplicaci√≥n"""
        self.config = load_config()
        self.ui_components = UIComponents()
        self.processor = BankProcessor()
        self.sheets_service: Optional[GoogleSheetsService] = None
        
        # Validar configuraci√≥n
        config_errors = validate_config(self.config)
        if config_errors:
            logger.warning(f"Errores de configuraci√≥n: {config_errors}")
        
        self._setup_session_state()
    
    
    def _setup_session_state(self):
        """Configurar el estado de la sesi√≥n"""
        if "app_state" not in st.session_state:
            st.session_state.app_state = {
                "current_step": 0,
                "processed_files": [],
                "processing_stats": {},
                "google_sheets_ready": False,
                "upload_completed": False,
                "config_validated": False,
                "data_sorted": False,
                "sort_order": "desc"  # desc = m√°s reciente primero, asc = m√°s antiguo primero
            }
    
    def _setup_sidebar(self) -> Dict[str, Any]:
        """Configurar el sidebar con opciones"""
        with st.sidebar:
            self.ui_components.render_sidebar_header()
            
            # Configuraci√≥n de Google Sheets
            sheet_config = self._render_sheets_config()
            
            # Modo Demo
            demo_mode = self._render_demo_mode()
            
            # Estado de conexi√≥n
            connection_status = self._render_connection_status(sheet_config)
            
            # Estad√≠sticas de sesi√≥n
            self._render_session_stats()
            
            return {
                "sheet_id": sheet_config["sheet_id"],
                "sheet_tab": sheet_config["sheet_tab"],
                "demo_mode": demo_mode,
                "connection_status": connection_status
            }
    
    def _render_sheets_config(self) -> Dict[str, str]:
        """Renderizar configuraci√≥n de Google Sheets"""
        st.markdown("#### üìä Google Sheets")
        
        sheet_id = st.text_input(
            "ID de la Hoja", 
            value=self.config.get("SHEET_ID", ""),
            placeholder="1BvyC2y3nRhCvKa9Q8yX7zF...",
            help="El ID de tu hoja de Google Sheets"
        )
        
        sheet_tab = st.text_input(
            "Nombre de la Pesta√±a",
            value=self.config.get("SHEET_TAB", "Movimientos_Nuevos"),
            placeholder="Movimientos_Nuevos",
            help="Nombre de la pesta√±a donde se insertar√°n los datos"
        )
        
        return {"sheet_id": sheet_id, "sheet_tab": sheet_tab}
    
    def _render_demo_mode(self) -> bool:
        """Renderizar modo demo - DESHABILITADO EN PRODUCCI√ìN"""
        # PRODUCCI√ìN: Modo demo siempre desactivado
        # Para habilitar modo demo en desarrollo, cambiar return False a return True
        return False

        # C√ìDIGO COMENTADO PARA DESARROLLO:
        # st.markdown("---")
        # st.markdown("#### üß™ Modo Demo")
        #
        # demo_mode = st.toggle(
        #     "üöÄ Activar Modo Demo",
        #     help="Saltar√° verificaciones de duplicados para testing",
        #     key="demo_mode"
        # )
        #
        # if demo_mode:
        #     st.info("üéØ Modo Demo Activo - Sin verificaci√≥n de duplicados")
        #     os.environ["DEMO_MODE"] = "true"
        # else:
        #     os.environ.pop("DEMO_MODE", None)
        #
        # return demo_mode
    
    def _render_connection_status(self, sheet_config: Dict[str, str]) -> bool:
        """Renderizar estado de conexi√≥n"""
        st.markdown("---")
        st.markdown("#### üîó Estado de Conexi√≥n")
        
        sheet_id = sheet_config["sheet_id"]
        
        if sheet_id and sheet_id != "TU_SHEET_ID":
            try:
                self.sheets_service = GoogleSheetsService(sheet_id)
                st.success("‚úÖ Conexi√≥n establecida")
                st.session_state.app_state["google_sheets_ready"] = True
                st.info(f"üìÑ Pesta√±a: `{sheet_config['sheet_tab']}`")
                return True
            except Exception as e:
                st.error("‚ùå Error de conexi√≥n")
                st.session_state.app_state["google_sheets_ready"] = False
                self.ui_components.show_warning_card(
                    "Problema de Configuraci√≥n",
                    f"No se pudo conectar: {str(e)[:100]}...",
                    "Verifica tu configuraci√≥n de Google Sheets"
                )
                return False
        else:
            st.warning("‚ö†Ô∏è Modo de prueba")
            st.session_state.app_state["google_sheets_ready"] = False
            self.ui_components.show_info_card(
                "Modo de Prueba Activo",
                "Configura Google Sheets para funcionalidad completa"
            )
            return False
    
    def _render_session_stats(self):
        """Renderizar estad√≠sticas de sesi√≥n - DESHABILITADO EN PRODUCCI√ìN"""
        # Secci√≥n removida para mantener el sidebar limpio y profesional
        # Las estad√≠sticas se muestran en cada pesta√±a cuando son relevantes
        pass
    
    def _render_file_upload_tab(self, sidebar_config: Dict[str, Any]):
        """Renderizar pesta√±a de carga de archivos"""
        st.markdown("## üìÅ Carga de Archivos Bancarios")

        # Mostrar mensajes de procesamiento previo si existen
        if "processing_summary" in st.session_state:
            summary = st.session_state["processing_summary"]

            if summary["successful_count"] > 0:
                st.success(f"‚úÖ {summary['successful_count']} archivo(s) procesado(s) exitosamente")

            if summary["skipped_count"] > 0:
                st.warning(f"‚ö†Ô∏è {summary['skipped_count']} archivo(s) ya fueron importados anteriormente")
                with st.expander("üìã Ver archivos duplicados", expanded=True):
                    for s in summary["skipped_files"]:
                        st.info(f"üìÑ **{s['file_name']}**\n\n{s['message']}")

            # Limpiar el mensaje despu√©s de mostrarlo
            del st.session_state["processing_summary"]

        self.ui_components.render_file_upload_zone()
        
        col1, col2 = st.columns([3, 1])

        with col1:
            uploaded_files = st.file_uploader(
                "Selecciona archivos bancarios",
                accept_multiple_files=True,
                type=['txt', 'csv'],
                help="Puedes cargar m√∫ltiples archivos a la vez",
                label_visibility="collapsed"
            )

        with col2:
            self.ui_components.render_upload_tips()

        if uploaded_files:
            if st.button("üîç Analizar Archivos", type="primary", use_container_width=True):
                # LIMPIAR cach√© de resultados anteriores
                if "processing_results" in st.session_state:
                    del st.session_state["processing_results"]
                if "processing_summary" in st.session_state:
                    del st.session_state["processing_summary"]

                # Contenedor de progreso
                progress_container = st.empty()
                status_container = st.empty()

                try:
                    # Solo usar demo_mode del sidebar (validaci√≥n SIEMPRE activa)
                    effective_demo_mode = sidebar_config["demo_mode"]

                    # Mostrar inicio del proceso
                    progress_container.info(f"üîÑ Iniciando an√°lisis de {len(uploaded_files)} archivo(s)...")

                    # PASO 1: Conectar a Google Sheets SIEMPRE (excepto en demo_mode real)
                    if not effective_demo_mode and sidebar_config["sheet_id"] != "TU_SHEET_ID":
                        status_container.info("üì° Conectando a Google Sheets para verificar duplicados...")

                    results = self.processor.process_files(
                        uploaded_files,
                        sidebar_config["sheet_id"],
                        sidebar_config["sheet_tab"],
                        effective_demo_mode  # Solo demo_mode real, NO force_reimport
                    )

                    if results:
                        # Separar archivos exitosos vs saltados
                        successful = [r for r in results if r.get("status") != "skipped_duplicate"]
                        skipped = [r for r in results if r.get("status") == "skipped_duplicate"]

                        # Mostrar resumen del an√°lisis
                        progress_container.success(f"‚úÖ An√°lisis completado: {len(successful)} procesado(s), {len(skipped)} duplicado(s)")

                        st.session_state["processing_results"] = results

                        # Guardar mensajes en session_state para mostrar despu√©s del rerun
                        st.session_state["processing_summary"] = {
                            "successful_count": len(successful),
                            "skipped_count": len(skipped),
                            "skipped_files": skipped
                        }

                        st.session_state.app_state["current_step"] = 1
                        st.rerun()
                    else:
                        # Todos los archivos fueron duplicados o hubo errores
                        progress_container.warning("‚ö†Ô∏è No se pudieron procesar los archivos")
                        status_container.info("üí° **Posibles razones:**\n"
                               "- Los archivos ya fueron importados anteriormente\n"
                               "- No contienen datos v√°lidos\n"
                               "- Activa el **Modo Demo** en el sidebar o el checkbox 'üîÑ Permitir reimportar'")
                except Exception as e:
                    progress_container.error(f"‚ùå Error procesando archivos: {e}")
                    logger.error(f"Error en procesamiento: {e}", exc_info=True)
        
        return uploaded_files
    
    def _render_processing_tab(self):
        """Renderizar pesta√±a de procesamiento"""
        if "processing_results" not in st.session_state:
            self.ui_components.show_info_card(
                "Sin Datos Procesados",
                "Primero carga y procesa algunos archivos en la pesta√±a anterior",
                "üìÅ"
            )
            return

        results = st.session_state["processing_results"]

        st.markdown("## üìã Resultados del Procesamiento")

        # Todos los archivos se procesan (no hay "skipped" por hash)
        successful = results

        if not successful:
            st.warning("‚ö†Ô∏è No se pudieron procesar los archivos. Verifica que sean archivos v√°lidos.")
            return

        # ============ SECCI√ìN DE ORGANIZACI√ìN DE DATOS ============
        st.markdown("---")
        st.markdown("### üîÑ Organizaci√≥n de Datos")

        col_sort1, col_sort2 = st.columns([2, 1])

        with col_sort1:
            st.markdown("**Ordenar datos cronol√≥gicamente (m√°s reciente ‚Üí m√°s antiguo):**")
            st.caption("üìÖ Los datos se insertar√°n en orden cronol√≥gico descendente")

        with col_sort2:
            # Bot√≥n para organizar datos (SIEMPRE descendente)
            if st.button("üîÑ Organizar Datos", type="secondary", use_container_width=True, key="btn_organizar"):
                progress_placeholder = st.empty()

                try:
                    progress_placeholder.info("üîÑ Organizando datos por fecha y hora...")

                    # Organizar cada resultado (SIEMPRE descendente: m√°s reciente primero)
                    for result in successful:
                        if not result["new_data"].empty:
                            # Ordenar datos nuevos (ascending=False = m√°s reciente primero)
                            result["new_data"] = self.processor.sort_data_by_datetime(
                                result["new_data"],
                                ascending=False
                            )

                            # Ordenar datos raw tambi√©n
                            result["raw_data"] = self.processor.sort_data_by_datetime(
                                result["raw_data"],
                                ascending=False
                            )

                    # Actualizar estado
                    st.session_state["processing_results"] = successful
                    st.session_state.app_state["data_sorted"] = True
                    st.session_state.app_state["sort_order"] = "desc"

                    # Mostrar √©xito de forma m√°s suave
                    progress_placeholder.success("‚úÖ Datos organizados correctamente (m√°s reciente ‚Üí m√°s antiguo)")
                    time.sleep(0.8)  # Pausa breve para mejor UX
                    progress_placeholder.empty()
                    st.rerun()

                except Exception as e:
                    progress_placeholder.error(f"‚ùå Error organizando datos: {e}")
                    logger.error(f"Error en organizaci√≥n de datos: {e}", exc_info=True)

        # Mostrar estado de organizaci√≥n
        if st.session_state.app_state.get("data_sorted", False):
            st.success("‚úÖ Datos organizados cronol√≥gicamente (m√°s reciente ‚Üí m√°s antiguo)")

            # Mostrar rango de fechas
            try:
                all_dates = []
                for result in successful:
                    if not result["new_data"].empty and "Fecha" in result["new_data"].columns:
                        all_dates.extend(result["new_data"]["Fecha"].dropna().tolist())

                if all_dates:
                    fecha_min = min(all_dates)
                    fecha_max = max(all_dates)
                    st.info(f"üìÖ Rango de fechas procesadas: **{fecha_max}** (m√°s reciente) ‚Üí **{fecha_min}** (m√°s antiguo)")
            except Exception as e:
                logger.warning(f"Error mostrando rango de fechas: {e}")
        else:
            st.warning("‚ö†Ô∏è Datos NO organizados. Presiona el bot√≥n 'üîÑ Organizar Datos' para ordenarlos antes de insertar.")

        st.markdown("---")
        # ============ FIN SECCI√ìN DE ORGANIZACI√ìN ============

        for result in successful:
            num_registros = len(result['new_data']) if not result['new_data'].empty else 0
            num_duplicados = len(result.get('duplicates', []))

            st.markdown(f"### üìÑ {result['file_name']}")

            col1, col2 = st.columns(2)
            with col1:
                st.metric("Total Le√≠dos", result["stats"]["FilasLe√≠das"])
                st.metric("Duplicados", num_duplicados, delta="Saltados", delta_color="inverse")

            with col2:
                st.metric("Nuevos", result["stats"]["NuevosInsertados"], delta="Para insertar", delta_color="normal")
                st.metric("Conflictos", result["stats"]["Conflictivos"])

            # Mostrar duplicados si existen
            if num_duplicados > 0:
                with st.expander(f"‚ö†Ô∏è Ver {num_duplicados} registros duplicados (NO se insertar√°n)", expanded=False):
                    st.warning(f"Estos {num_duplicados} registros ya existen en Google Sheets y NO ser√°n insertados")

                    for idx, dup in enumerate(result['duplicates'][:20], 1):  # Mostrar m√°ximo 20
                        with st.container():
                            col_a, col_b = st.columns([1, 3])

                            with col_a:
                                st.markdown(f"**#{idx}**")
                                st.caption(f"Recibo: `{dup.get('recibo', 'N/A')}`")

                            with col_b:
                                st.markdown(f"**Descripci√≥n:**")
                                st.caption(dup.get('descripcion', 'N/A')[:200])

                            st.markdown("---")

                    if num_duplicados > 20:
                        st.info(f"Mostrando 20 de {num_duplicados} duplicados. Los dem√°s tambi√©n ser√°n omitidos.")

            # Mostrar vista previa de datos nuevos (ahora ordenados si se aplic√≥)
            if not result["new_data"].empty:
                preview_title = "‚úÖ Vista previa de datos NUEVOS que se insertar√°n"
                if st.session_state.app_state.get("data_sorted", False):
                    preview_title += " üîΩ (ordenados cronol√≥gicamente)"

                with st.expander(preview_title, expanded=False):
                    st.markdown("**üìã Primeros 10 registros:**")

                    # IMPORTANTE: Explicar qu√© datos se muestran
                    st.info("**üîë Clave** = N√∫mero de Recibo que se usar√° para validar duplicados\n\n"
                           "**üìÖ Fecha + ‚è∞ Hora** = Datos organizados cronol√≥gicamente")

                    # Crear DataFrame de vista previa con formato personalizado
                    preview_data = result["new_data"].head(10).copy()

                    # Seleccionar y ordenar columnas para mejor visualizaci√≥n
                    display_cols = []
                    col_mapping = {}

                    # Detectar columna de FECHA (puede tener nombres raros por el formato Acumulado)
                    fecha_col = None
                    for col in preview_data.columns:
                        if "Fecha" in col or col == "2025-07-17T18:32:23.744Z":
                            fecha_col = col
                            break

                    if fecha_col:
                        display_cols.append(fecha_col)
                        col_mapping[fecha_col] = "üìÖ Fecha"

                    # HORA
                    if "Hora" in preview_data.columns:
                        display_cols.append("Hora")
                        col_mapping["Hora"] = "‚è∞ Hora"

                    # CLAVE (identificador √∫nico - puede ser Recibo o Clave)
                    clave_col = None
                    if "Clave" in preview_data.columns:
                        clave_col = "Clave"
                    elif "Recibo" in preview_data.columns:
                        clave_col = "Recibo"

                    if clave_col:
                        display_cols.append(clave_col)
                        col_mapping[clave_col] = "üîë Clave (ID √∫nico)"

                    # DESCRIPCI√ìN (truncada para legibilidad)
                    if "Descripci√≥n" in preview_data.columns:
                        display_cols.append("Descripci√≥n")
                        col_mapping["Descripci√≥n"] = "üìù Descripci√≥n"

                        # Truncar descripciones largas
                        preview_data["Descripci√≥n"] = preview_data["Descripci√≥n"].apply(
                            lambda x: str(x)[:80] + "..." if pd.notna(x) and len(str(x)) > 80 else str(x)
                        )

                    # MONTOS
                    if "Egreso" in preview_data.columns:
                        display_cols.append("Egreso")
                        col_mapping["Egreso"] = "üí∏ Egreso"
                    elif "Cargo" in preview_data.columns:
                        display_cols.append("Cargo")
                        col_mapping["Cargo"] = "üí∏ Cargo"

                    if "Ingreso" in preview_data.columns:
                        display_cols.append("Ingreso")
                        col_mapping["Ingreso"] = "üí∞ Ingreso"
                    elif "Abono" in preview_data.columns:
                        display_cols.append("Abono")
                        col_mapping["Abono"] = "üí∞ Abono"

                    # Filtrar solo columnas disponibles
                    display_cols = [col for col in display_cols if col in preview_data.columns]

                    if display_cols:
                        preview_display = preview_data[display_cols].rename(columns=col_mapping)

                        # Configurar opciones de visualizaci√≥n
                        st.dataframe(
                            preview_display,
                            use_container_width=True,
                            hide_index=True,
                            height=450,
                            column_config={
                                "üìÖ Fecha": st.column_config.TextColumn(
                                    "üìÖ Fecha",
                                    help="Fecha del movimiento",
                                    width="medium"
                                ),
                                "‚è∞ Hora": st.column_config.TextColumn(
                                    "‚è∞ Hora",
                                    help="Hora del movimiento",
                                    width="small"
                                ),
                                "üîë Clave (ID √∫nico)": st.column_config.TextColumn(
                                    "üîë Clave",
                                    help="N√∫mero de recibo usado para validar duplicados",
                                    width="medium"
                                ),
                                "üìù Descripci√≥n": st.column_config.TextColumn(
                                    "üìù Descripci√≥n",
                                    help="Descripci√≥n completa del movimiento (truncada en vista previa)",
                                    width="large"
                                ),
                            }
                        )

                        st.caption(f"üìä Mostrando 10 de {len(result['new_data'])} registros nuevos")
                        st.caption("üí° La descripci√≥n est√° truncada a 80 caracteres. Los datos completos se insertar√°n en Google Sheets.")
                    else:
                        st.warning("No hay columnas para mostrar")
            else:
                st.info("‚úÖ No hay registros nuevos en este archivo (todos son duplicados)")

            st.markdown("---")

        # Bot√≥n para proceder a inserci√≥n (solo contar archivos exitosos)
        total_new = sum([len(r["new_data"]) for r in successful if not r["new_data"].empty])
        if total_new > 0:
            st.markdown("---")

            # Validar si los datos est√°n ordenados
            if not st.session_state.app_state.get("data_sorted", False):
                st.warning("‚ö†Ô∏è **Recomendaci√≥n:** Organiza los datos antes de proceder a la inserci√≥n")

            # Informaci√≥n de datos listos
            col_info1, col_info2 = st.columns([2, 1])

            with col_info1:
                st.success(f"‚úÖ **{total_new} registros** listos para insertar en Google Sheets")
                if st.session_state.app_state.get("data_sorted", False):
                    st.info("üìã Datos organizados cronol√≥gicamente (m√°s reciente ‚Üí m√°s antiguo)")

            with col_info2:
                st.markdown("")  # Espaciado
                st.markdown("### ‚û°Ô∏è Siguiente paso:")
                st.info("**Haz clic en la pesta√±a:**\n\nüìä **Insertar a Sheets**")

            # Bot√≥n informativo que prepara el estado
            if st.button(f"‚úì Confirmar y Preparar Inserci√≥n",
                       type="primary", use_container_width=True, key="btn_preparar_insercion"):
                st.session_state.app_state["ready_for_insertion"] = True
                st.balloons()
                st.success("üéâ ¬°Datos confirmados! Ahora ve a la pesta√±a **'üìä Insertar a Sheets'** para completar la inserci√≥n.")
                st.info("üëÜ Haz clic en la pesta√±a **'üìä Insertar a Sheets'** arriba para continuar")
    
    def _render_insertion_tab(self, sidebar_config: Dict[str, Any]):
        """Renderizar pesta√±a de inserci√≥n"""
        if "processing_results" not in st.session_state:
            self.ui_components.show_info_card(
                "Sin Datos para Insertar",
                "Primero procesa algunos archivos en las pesta√±as anteriores",
                "üîç"
            )
            return
        
        results = st.session_state["processing_results"]
        total_new = sum([len(r["new_data"]) for r in results])
        
        if total_new == 0:
            self.ui_components.show_info_card(
                "Sin Datos para Insertar",
                "Todos los registros ya existen en tu hoja de Google Sheets",
                "üîÑ"
            )
            return
        
        st.markdown("## üìä Inserci√≥n a Google Sheets")
        
        # Resumen de inserci√≥n
        col1, col2 = st.columns(2)
        
        with col1:
            self.ui_components.render_insertion_summary(total_new, len(results))
        
        with col2:
            self.ui_components.render_time_estimation(total_new)
        
        # Bot√≥n de inserci√≥n
        st.markdown("<br>", unsafe_allow_html=True)
        
        if st.button(f"üöÄ Insertar {total_new} Registros a Google Sheets",
                     type="primary", use_container_width=True):

            # Contenedores de progreso
            progress_bar = st.progress(0)
            status_text = st.empty()
            detail_text = st.empty()

            try:
                import time

                if self.sheets_service:
                    # PASO 1: Preparando datos
                    status_text.info("üì¶ Paso 1/4: Preparando datos para inserci√≥n...")
                    detail_text.text(f"Preparando {total_new} registros de {len([r for r in results if r.get('status') != 'skipped_duplicate'])} archivo(s)")
                    progress_bar.progress(25)
                    time.sleep(0.5)

                    # PASO 2: Conectando a Google Sheets
                    status_text.info("üì° Paso 2/4: Conectando a Google Sheets...")
                    detail_text.text(f"Destino: {sidebar_config['sheet_tab']}")
                    progress_bar.progress(40)
                    time.sleep(0.5)

                    # PASO 3: Buscando ubicaci√≥n correcta
                    status_text.info("üîç Paso 3/4: Analizando columna A para encontrar primera fila vac√≠a...")
                    detail_text.text("Esto garantiza que no se sobrescriban datos existentes")
                    progress_bar.progress(60)
                    time.sleep(0.5)

                    # PASO 4: Insertando registros
                    status_text.info(f"üìù Paso 4/4: Insertando {total_new} registros...")
                    detail_text.text("‚è≥ Este proceso puede tardar varios segundos... Por favor espera")
                    progress_bar.progress(80)

                    # Ejecutar inserci√≥n
                    insertion_result = self.sheets_service.insert_results(results, sidebar_config["sheet_tab"])

                    # COMPLETADO
                    progress_bar.progress(100)
                    status_text.success("‚úÖ Inserci√≥n completada exitosamente")

                    # Mostrar resumen de inserci√≥n
                    st.markdown("---")
                    st.markdown("### üìä Resumen de Inserci√≥n:")

                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("‚úÖ Registros Insertados", insertion_result.get("inserted", 0), delta="Nuevos")
                    with col2:
                        st.metric("‚ö†Ô∏è Duplicados Saltados", insertion_result.get("duplicates", 0), delta="Ya exist√≠an")
                    with col3:
                        st.metric("‚ùå Errores", insertion_result.get("errors", 0))

                    # Mostrar detalles de duplicados si los hay
                    if insertion_result.get("skipped_duplicates"):
                        st.markdown("---")
                        st.warning(f"‚ö†Ô∏è Se saltaron {len(insertion_result['skipped_duplicates'])} registros duplicados")

                        with st.expander("üìã Ver TODOS los datos de registros NO insertados", expanded=True):
                            st.markdown("### üîç Registros duplicados - Informaci√≥n completa para verificaci√≥n")
                            st.info("üí° Puedes buscar estos datos en el TXT y en Google Sheets para confirmar que ya existen")

                            for idx, dup in enumerate(insertion_result["skipped_duplicates"], 1):
                                with st.container():
                                    st.markdown(f"#### ‚ùå Registro #{idx} - NO INSERTADO")

                                    col1, col2 = st.columns(2)

                                    with col1:
                                        st.markdown("**üìÑ Informaci√≥n del registro:**")
                                        st.code(f"""
Recibo/Clave: {dup.get('recibo', 'N/A')}

Descripci√≥n completa:
{dup.get('descripcion', 'N/A')}
                                        """)

                                    with col2:
                                        st.markdown("**‚ö†Ô∏è Raz√≥n:**")
                                        st.error(dup.get('reason', 'Duplicado'))

                                        st.markdown("**üîç C√≥mo verificar:**")
                                        st.markdown(f"""
1. **En el TXT:** Busca el recibo `{dup.get('recibo', 'N/A')}`
2. **En Google Sheets:** Busca en columna F (Clave) el valor `{dup.get('recibo', 'N/A')}`
3. Confirma que la descripci√≥n coincide
                                        """)

                                    st.markdown("---")

                    # Limpiar session state de resultados procesados
                    st.session_state.pop("processing_results", None)
                    st.session_state.pop("processing_summary", None)

                    st.balloons()

                    # Mostrar link a Google Sheets
                    st.markdown("---")
                    st.markdown(f"### üîó Verifica tus datos:")
                    st.markdown(f"[Abrir Google Sheets](https://docs.google.com/spreadsheets/d/{sidebar_config['sheet_id']}/edit)")
                else:
                    status_text.warning("‚ö†Ô∏è Modo demo - No se realiz√≥ inserci√≥n real")
                    detail_text.info("Configura Google Sheets en el sidebar para inserci√≥n real")

            except Exception as e:
                progress_bar.empty()
                status_text.error(f"‚ùå Error durante la inserci√≥n: {e}")
                detail_text.error("Revisa los logs o intenta nuevamente")
                logger.error(f"Error en inserci√≥n: {e}", exc_info=True)
    
    def run(self):
        """Ejecutar la aplicaci√≥n principal"""
        try:
            # Configurar sidebar
            sidebar_config = self._setup_sidebar()
            
            # Renderizar header principal
            self.ui_components.render_main_header()
            
            # Navegaci√≥n por pesta√±as
            tabs = ["üìÅ Cargar Archivos", "üîç Procesar Datos", "üìä Insertar a Sheets"]
            tab1, tab2, tab3 = st.tabs(tabs)
            
            with tab1:
                self._render_file_upload_tab(sidebar_config)
            
            with tab2:
                self._render_processing_tab()
            
            with tab3:
                self._render_insertion_tab(sidebar_config)
                
        except Exception as e:
            logger.error(f"Error en la aplicaci√≥n: {e}")
            st.error(f"Error fatal: {e}")

def run_app():
    """Funci√≥n principal para ejecutar la aplicaci√≥n"""
    # Crear directorio de logs si no existe
    Path("logs").mkdir(exist_ok=True)
    
    # Configurar logging
    setup_logging()
    
    # Crear y ejecutar la aplicaci√≥n
    app = ConciliadorApp()
    app.run()

if __name__ == "__main__":
    run_app()

